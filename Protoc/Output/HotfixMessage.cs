// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Secode.Protobuf;
using pbc = global::Secode.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Secode.Network {

  #region Messages
  /// <summary>
  /// 三维坐标信息
  /// </summary>
  public partial class Vector3Info : pb::IMessage {
    private static readonly pb::MessageParser<Vector3Info> _parser = new pb::MessageParser<Vector3Info>(() => (Vector3Info)MessagePool.Instance.Fetch(typeof(Vector3Info)));
    public static pb::MessageParser<Vector3Info> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 四元数坐标信息
  /// </summary>
  public partial class QuaternionInfo : pb::IMessage {
    private static readonly pb::MessageParser<QuaternionInfo> _parser = new pb::MessageParser<QuaternionInfo>(() => (QuaternionInfo)MessagePool.Instance.Fetch(typeof(QuaternionInfo)));
    public static pb::MessageParser<QuaternionInfo> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private float w_;
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      w_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 变换信息
  /// </summary>
  public partial class TransformInfo : pb::IMessage {
    private static readonly pb::MessageParser<TransformInfo> _parser = new pb::MessageParser<TransformInfo>(() => (TransformInfo)MessagePool.Instance.Fetch(typeof(TransformInfo)));
    public static pb::MessageParser<TransformInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::Secode.Network.Vector3Info position_;
    /// <summary>
    /// 位置
    /// </summary>
    public global::Secode.Network.Vector3Info Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private global::Secode.Network.QuaternionInfo rotation_;
    /// <summary>
    /// 旋转
    /// </summary>
    public global::Secode.Network.QuaternionInfo Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    private global::Secode.Network.Vector3Info scale_;
    /// <summary>
    /// 放缩
    /// </summary>
    public global::Secode.Network.Vector3Info Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (position_ != null) MessagePool.Instance.Recycle(position_); position_ = null;
      if (rotation_ != null) MessagePool.Instance.Recycle(rotation_); rotation_ = null;
      if (scale_ != null) MessagePool.Instance.Recycle(scale_); scale_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Secode.Network.Vector3Info();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Secode.Network.QuaternionInfo();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 26: {
            if (scale_ == null) {
              scale_ = new global::Secode.Network.Vector3Info();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 无放缩变换信息
  /// </summary>
  public partial class TransformInfoNoScale : pb::IMessage {
    private static readonly pb::MessageParser<TransformInfoNoScale> _parser = new pb::MessageParser<TransformInfoNoScale>(() => (TransformInfoNoScale)MessagePool.Instance.Fetch(typeof(TransformInfoNoScale)));
    public static pb::MessageParser<TransformInfoNoScale> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::Secode.Network.Vector3Info position_;
    /// <summary>
    /// 位置
    /// </summary>
    public global::Secode.Network.Vector3Info Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private global::Secode.Network.QuaternionInfo rotation_;
    /// <summary>
    /// 旋转
    /// </summary>
    public global::Secode.Network.QuaternionInfo Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (position_ != null) MessagePool.Instance.Recycle(position_); position_ = null;
      if (rotation_ != null) MessagePool.Instance.Recycle(rotation_); rotation_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Secode.Network.Vector3Info();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Secode.Network.QuaternionInfo();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// VR角色信息
  /// </summary>
  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long playerId_;
    /// <summary>
    /// 玩家的临时ID
    /// </summary>
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private global::Secode.Network.TransformInfoNoScale head_;
    /// <summary>
    /// 头盔
    /// </summary>
    public global::Secode.Network.TransformInfoNoScale Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    private global::Secode.Network.TransformInfoNoScale leftHand_;
    /// <summary>
    /// 左手手柄
    /// </summary>
    public global::Secode.Network.TransformInfoNoScale LeftHand {
      get { return leftHand_; }
      set {
        leftHand_ = value;
      }
    }

    private global::Secode.Network.TransformInfoNoScale rightHand_;
    /// <summary>
    /// 右手手柄
    /// </summary>
    public global::Secode.Network.TransformInfoNoScale RightHand {
      get { return rightHand_; }
      set {
        rightHand_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (head_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Head);
      }
      if (leftHand_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LeftHand);
      }
      if (rightHand_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RightHand);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (leftHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftHand);
      }
      if (rightHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightHand);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      if (head_ != null) MessagePool.Instance.Recycle(head_); head_ = null;
      if (leftHand_ != null) MessagePool.Instance.Recycle(leftHand_); leftHand_ = null;
      if (rightHand_ != null) MessagePool.Instance.Recycle(rightHand_); rightHand_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            if (head_ == null) {
              head_ = new global::Secode.Network.TransformInfoNoScale();
            }
            input.ReadMessage(head_);
            break;
          }
          case 26: {
            if (leftHand_ == null) {
              leftHand_ = new global::Secode.Network.TransformInfoNoScale();
            }
            input.ReadMessage(leftHand_);
            break;
          }
          case 34: {
            if (rightHand_ == null) {
              rightHand_ = new global::Secode.Network.TransformInfoNoScale();
            }
            input.ReadMessage(rightHand_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录请求信息
  /// </summary>
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string userID_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录回传信息
  /// </summary>
  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    /// <summary>
    /// 连接钥匙
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_gates_codec
        = pb::FieldCodec.ForString(18);
    private pbc::RepeatedField<string> gates_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 房间门列表
    /// </summary>
    public pbc::RepeatedField<string> Gates {
      get { return gates_; }
      set { gates_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      gates_.WriteTo(output, _repeated_gates_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      size += gates_.CalculateSize(_repeated_gates_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      gates_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            gates_.AddEntriesFrom(input, _repeated_gates_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新建房间
  /// </summary>
  public partial class C2R_NewGate : pb::IMessage {
    private static readonly pb::MessageParser<C2R_NewGate> _parser = new pb::MessageParser<C2R_NewGate>(() => (C2R_NewGate)MessagePool.Instance.Fetch(typeof(C2R_NewGate)));
    public static pb::MessageParser<C2R_NewGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 连接钥匙
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 房间名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string secretKey_ = "";
    /// <summary>
    /// 授权钥匙
    /// </summary>
    public string SecretKey {
      get { return secretKey_; }
      set {
        secretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SecretKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecretKey);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SecretKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      name_ = "";
      secretKey_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SecretKey = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新建房间回传信息
  /// </summary>
  public partial class R2C_NewGate : pb::IMessage {
    private static readonly pb::MessageParser<R2C_NewGate> _parser = new pb::MessageParser<R2C_NewGate>(() => (R2C_NewGate)MessagePool.Instance.Fetch(typeof(R2C_NewGate)));
    public static pb::MessageParser<R2C_NewGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string gate_ = "";
    /// <summary>
    /// 房间门
    /// </summary>
    public string Gate {
      get { return gate_; }
      set {
        gate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Gate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Gate);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Gate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gate_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Gate = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 连接房间信息
  /// </summary>
  public partial class C2G_Link : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Link> _parser = new pb::MessageParser<C2G_Link>(() => (C2G_Link)MessagePool.Instance.Fetch(typeof(C2G_Link)));
    public static pb::MessageParser<C2G_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 连接钥匙
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private string gate_ = "";
    /// <summary>
    /// 房间门
    /// </summary>
    public string Gate {
      get { return gate_; }
      set {
        gate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Gate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Gate);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Gate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      gate_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            Gate = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间连接回传信息
  /// </summary>
  public partial class G2C_Link : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Link> _parser = new pb::MessageParser<G2C_Link>(() => (G2C_Link)MessagePool.Instance.Fetch(typeof(G2C_Link)));
    public static pb::MessageParser<G2C_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    /// <summary>
    /// 玩家的临时ID
    /// </summary>
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求用户信息
  /// </summary>
  public partial class C2G_Info : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Info> _parser = new pb::MessageParser<C2G_Info>(() => (C2G_Info)MessagePool.Instance.Fetch(typeof(C2G_Info)));
    public static pb::MessageParser<C2G_Info> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long playerId_;
    /// <summary>
    /// 玩家的临时ID
    /// </summary>
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户信息回传
  /// </summary>
  public partial class G2C_Info : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Info> _parser = new pb::MessageParser<G2C_Info>(() => (G2C_Info)MessagePool.Instance.Fetch(typeof(G2C_Info)));
    public static pb::MessageParser<G2C_Info> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::Secode.Network.PlayerInfo playerInfo_;
    /// <summary>
    /// 玩家数据
    /// </summary>
    public global::Secode.Network.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Secode.Network.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求用户列表
  /// </summary>
  public partial class C2G_Players : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Players> _parser = new pb::MessageParser<C2G_Players>(() => (C2G_Players)MessagePool.Instance.Fetch(typeof(C2G_Players)));
    public static pb::MessageParser<C2G_Players> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long playerId_;
    /// <summary>
    /// 玩家的临时ID
    /// </summary>
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户列表回传
  /// </summary>
  public partial class G2C_Players : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Players> _parser = new pb::MessageParser<G2C_Players>(() => (G2C_Players)MessagePool.Instance.Fetch(typeof(G2C_Players)));
    public static pb::MessageParser<G2C_Players> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_playerId_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> playerId_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 玩家的临时ID列表
    /// </summary>
    public pbc::RepeatedField<long> PlayerId {
      get { return playerId_; }
      set { playerId_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      playerId_.WriteTo(output, _repeated_playerId_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += playerId_.CalculateSize(_repeated_playerId_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            playerId_.AddEntriesFrom(input, _repeated_playerId_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户移动消息
  /// </summary>
  public partial class Frame_PlayerMove : pb::IMessage {
    private static readonly pb::MessageParser<Frame_PlayerMove> _parser = new pb::MessageParser<Frame_PlayerMove>(() => (Frame_PlayerMove)MessagePool.Instance.Fetch(typeof(Frame_PlayerMove)));
    public static pb::MessageParser<Frame_PlayerMove> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::Secode.Network.PlayerInfo playerInfo_;
    public global::Secode.Network.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      rpcId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Secode.Network.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
